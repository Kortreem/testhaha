const API_BASE = 'http://localhost:8000'; 
// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showAlert(message, type = 'info') {
    const alertContainer = document.getElementById('alert-container');
    const alertId = 'alert-' + Date.now();
    
    const alertHTML = `
        <div id="${alertId}" class="alert alert-${type} alert-dismissible fade show alert-auto" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    
    alertContainer.innerHTML += alertHTML;
    
    // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        const alert = document.getElementById(alertId);
        if (alert) alert.remove();
    }, 3000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
async function loadComputers() {
    try {
        const response = await fetch(`${API_BASE}/computers`);
        const computers = await response.json();
        
        const container = document.getElementById('computers-list');
        
        if (computers.length === 0) {
            container.innerHTML = `
                <div class="alert alert-info">
                    –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤
                </div>
            `;
            return;
        }
        
        let html = `
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>–ò–º—è</th>
                            <th>IP –∞–¥—Ä–µ—Å</th>
                            <th>–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä</th>
                            <th>–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞</th>
                            <th>–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        computers.forEach(computer => {
            html += `
                <tr>
                    <td><strong>${computer.name}</strong></td>
                    <td><span class="badge bg-secondary">${computer.ip}</span></td>
                    <td>${computer.cpu || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
                    <td>${computer.gpu || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</td>
                    <td><small>${new Date(computer.last_seen).toLocaleString()}</small></td>
                </tr>
            `;
        });
        
        html += `</tbody></table></div>`;
        container.innerHTML = html;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤', 'danger');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
async function loadDrivers() {
    try {
        const response = await fetch(`${API_BASE}/drivers`)
        const drivers = await response.json();
        
        const container = document.getElementById('drivers-list');
        
        if (drivers.length === 0) {
            container.innerHTML = `
                <div class="alert alert-info">
                    –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥—Ä–∞–π–≤–µ—Ä–æ–≤
                </div>
            `;
            return;
        }
        
        let html = '';
        drivers.forEach(driver => {
            const sizeMB = driver.file_size ? (driver.file_size / (1024 * 1024)).toFixed(2) : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            html += `
                <div class="card driver-card mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5 class="card-title">${driver.model}</h5>
                                <p class="card-text mb-1">
                                    <strong>–í–µ—Ä—Å–∏—è:</strong> ${driver.version} | 
                                    <strong>–û–°:</strong> ${driver.os} |
                                    <strong>–†–∞–∑–º–µ—Ä:</strong> ${sizeMB} MB
                                </p>
                                <p class="card-text">
                                    <small class="text-muted">
                                        ID: ${driver.hardware_id} | 
                                        –ó–∞–≥—Ä—É–∂–µ–Ω: ${new Date(driver.upload_date).toLocaleDateString()}
                                    </small>
                                </p>
                            </div>
                            <button class="btn btn-outline-danger btn-sm" onclick="deleteDriver('${driver.hardware_id}')">
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            `;
        });
        
        container.innerHTML = html;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤', 'danger');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
async function loadStatus() {
    try {
        const response = await fetch(`${API_BASE}/status`)
        const status = await response.json();
        
        const container = document.getElementById('status-info');
        
        container.innerHTML = `
            <div class="row">
                <div class="col-md-6">
                    <div class="card bg-light mb-3">
                        <div class="card-body">
                            <h5 class="card-title">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h5>
                            <p><strong>–ö–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:</strong> ${status.computers_registered}</p>
                            <p><strong>–î—Ä–∞–π–≤–µ—Ä–æ–≤:</strong> ${status.drivers_available}</p>
                            <p><strong>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</strong> ${status.total_drivers_size_mb} MB</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card bg-light mb-3">
                        <div class="card-body">
                            <h5 class="card-title">‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h5>
                            <p><strong>–û–∂–∏–¥–∞—é—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:</strong> ${status.pending_installations}</p>
                            <p><strong>–£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:</strong> ${status.outdated_computers}</p>
                            <p><strong>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</strong> 
                                <span class="badge bg-success">${status.status}</span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'danger');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞
async function uploadDriver(event) {
    event.preventDefault();
    
    const form = event.target;
    const formData = new FormData();
    
    const fileInput = document.getElementById('driver-file');
    const model = document.getElementById('model').value;
    const version = document.getElementById('version').value;
    
    formData.append('file', fileInput.files[0]);
    formData.append('model', model);
    formData.append('driver_version', version);
    
    try {
        const response = await fetch(`${API_BASE}/drivers/register`, {
            method: 'POST',
            body: formData
        });
        
        if (response.ok) {
            const result = await response.json();
            showAlert(`–î—Ä–∞–π–≤–µ—Ä ${model} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!`, 'success');
            form.reset();
            loadDrivers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä–∞–π–≤–µ—Ä–æ–≤
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞', 'danger');
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞
async function deleteDriver(hardwareId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥—Ä–∞–π–≤–µ—Ä?')) return;
    
    try {
        const response = await fetch(`${API_BASE}/drivers/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                hardware_id: hardwareId,
                reason: "–£–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
            })
        });
        
        if (response.ok) {
            showAlert('–î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω', 'success');
            loadDrivers(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showAlert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞', 'danger');
    }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    loadComputers();
    loadStatus();
});