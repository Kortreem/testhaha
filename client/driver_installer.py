import requests
import os
import tempfile
import subprocess
import logging


class DriverInstaller:
    def __init__(self, server_url):
        self.server_url = server_url
        self.temp_dir = tempfile.gettempdir()
        self.logger = logging.getLogger(__name__)

    def download_driver(self, hardware_id):
        try:
            response = requests.get(f"{self.server_url}/drivers/{hardware_id}")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –î—Ä–∞–π–≤–µ—Ä {hardware_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None

            driver_info = response.json()
            file_url = f"{self.server_url}/static/{hardware_id}.exe"

            file_response = requests.get(file_url, stream=True)
            if file_response.status_code == 200:
                file_path = os.path.join(self.temp_dir, f"{hardware_id}.exe")
                with open(file_path, 'wb') as f:
                    for chunk in file_response.iter_content(chunk_size=8192):
                        f.write(chunk)

                self.logger.info(f"‚úÖ –î—Ä–∞–π–≤–µ—Ä —Å–∫–∞—á–∞–Ω: {file_path}")
                return file_path
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –¥—Ä–∞–π–≤–µ—Ä–∞")
                return None

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return None

    def install_driver(self, file_path):
        try:
            self.logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä: {file_path}")

            if platform.system() == "Windows":
                process = subprocess.Popen(
                    [file_path, '/S', '/quiet'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True
                )

                stdout, stderr = process.communicate(timeout=300)

                if process.returncode == 0:
                    self.logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return True
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {stderr}")
                    return False
            else:
                self.logger.error("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Windows")
                return False

        except subprocess.TimeoutExpired:
            self.logger.error("‚ùå –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞")
            return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            return False

    def send_installation_report(self, computer_name, hardware_id, status, message=""):
        try:
            report_data = {
                "computer_name": computer_name,
                "hardware_id": hardware_id,
                "status": status,
                "message": message
            }

            response = requests.post(
                f"{self.server_url}/installation/report",
                json=report_data
            )

            if response.status_code == 200:
                self.logger.info("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {response.text}")
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return False

    def install_driver(self, hardware_id, driver_info, computer_name):
        try:
            driver_path = self.download_driver(hardware_id)
            if not driver_path:
                self.send_installation_report(
                    computer_name, hardware_id,
                    "failed", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –¥—Ä–∞–π–≤–µ—Ä"
                )
                return False

            success = self.install_driver_file(driver_path)

            if success:
                self.send_installation_report(
                    computer_name, hardware_id,
                    "success", f"–î—Ä–∞–π–≤–µ—Ä {driver_info['available_driver']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
            else:
                self.send_installation_report(
                    computer_name, hardware_id,
                    "failed", "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞"
                )

            try:
                if os.path.exists(driver_path):
                    os.remove(driver_path)
            except:
                pass

            return success

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            self.send_installation_report(
                computer_name, hardware_id,
                "failed", f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )
            return False